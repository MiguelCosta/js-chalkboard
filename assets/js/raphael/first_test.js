// Generated by CoffeeScript 1.3.3
(function() {
  var $, LineTool, MouseListener, RaphaelWrapper, Toolbox, Util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  $ = jQuery;

  Util = (function() {

    function Util() {}

    Util.getCurrentColor = function() {
      return $('.colorpicker_current_color')[0].style.backgroundColor;
    };

    Util.pathStr = function(start, end) {
      return "M " + start.x + "," + start.y + " L " + end.x + "," + end.y;
    };

    return Util;

  })();

  Toolbox = (function() {

    function Toolbox(wrap) {
      var _this = this;
      this.wrap = wrap;
      this.setCurrent = __bind(this.setCurrent, this);

      this.current;
      this.current_btn = $([]);
      this.all_btns = $('#toolbox *');
      this.btn_line = $('#btn_line');
      this.all_btns.click(function(event) {
        return _this.setCurrent($(event.target));
      });
    }

    Toolbox.prototype.setCurrent = function(tool) {
      this.current_btn.removeClass('active');
      this.current_btn = tool;
      tool.addClass('active');
      switch (tool[0].id) {
        case 'btn_line':
          return this.current = new LineTool(this.wrap);
      }
    };

    return Toolbox;

  })();

  MouseListener = (function() {

    MouseListener.prototype.pressed = false;

    MouseListener.prototype.start = null;

    MouseListener.prototype.end = null;

    MouseListener.prototype.tool = null;

    function MouseListener(wrap) {
      this.wrap = wrap;
      this.tool = __bind(this.tool, this);

      this.mouseup = __bind(this.mouseup, this);

      this.mousemove = __bind(this.mousemove, this);

      this.mousedown = __bind(this.mousedown, this);

      this.tool = this.wrap.toolbox.current;
      this.wrap.container.mousedown(this.mousedown);
      this.wrap.container.mousemove(this.mousemove);
      this.wrap.container.mouseup(this.mouseup);
    }

    MouseListener.prototype.mousedown = function(event) {
      event.preventDefault();
      this.start = this.getMouseCoords(event);
      this.pressed = true;
      return this.tool.mousedown(this.start);
    };

    MouseListener.prototype.mousemove = function(event) {
      event.preventDefault();
      if (!this.pressed) {
        return;
      }
      this.end = this.getMouseCoords(event);
      return this.tool.mousemove(this.end);
    };

    MouseListener.prototype.mouseup = function(event) {
      event.preventDefault();
      this.tool.mouseup();
      return this.pressed = false;
    };

    MouseListener.prototype.getMouseCoords = function(event) {
      $.event.fix(event);
      return {
        x: event.pageX - this.wrap.offset.left,
        y: event.pageY - this.wrap.offset.top
      };
    };

    MouseListener.prototype.tool = function() {
      return this.wrap.toolbox.current;
    };

    return MouseListener;

  })();

  LineTool = (function() {

    LineTool.prototype.start = null;

    LineTool.prototype.end = null;

    LineTool.prototype.current = null;

    function LineTool(wrap) {
      this.wrap = wrap;
      this.mousemove = __bind(this.mousemove, this);

      this.mouseup = __bind(this.mouseup, this);

      this.mousedown = __bind(this.mousedown, this);

    }

    LineTool.prototype.mousedown = function(coords) {
      return this.start = coords;
    };

    LineTool.prototype.mouseup = function() {
      this.wrap.objs.push(this.current);
      return this.current = null;
    };

    LineTool.prototype.mousemove = function(coords) {
      if (this.current !== null) {
        this.current.remove();
      }
      this.end = coords;
      this.current = this.wrap.paper.path(Util.pathStr(this.start, this.end));
      return this.current.attr({
        stroke: Util.getCurrentColor()
      });
    };

    return LineTool;

  })();

  RaphaelWrapper = (function() {

    RaphaelWrapper.prototype.objs = [];

    RaphaelWrapper.prototype.container = null;

    RaphaelWrapper.prototype.paper = null;

    RaphaelWrapper.prototype.canvas = null;

    RaphaelWrapper.prototype.toolbox = null;

    RaphaelWrapper.prototype.mouse_handle = null;

    RaphaelWrapper.prototype.offset = null;

    function RaphaelWrapper() {
      this.initToolbox = __bind(this.initToolbox, this);

      this.initCanvas = __bind(this.initCanvas, this);
      this.initCanvas();
      this.initToolbox();
      this.mouse_handle = new MouseListener(this);
    }

    RaphaelWrapper.prototype.initCanvas = function() {
      this.container = $('#chalkboard-container');
      this.offset = this.container.offset();
      this.paper = new Raphael(this.container[0], 800, 600);
      return this.canvas = this.paper.image('assets/images/back.jpg', 0, 0, 800, 600);
    };

    RaphaelWrapper.prototype.initToolbox = function() {
      this.toolbox = new Toolbox(this);
      return this.toolbox.setCurrent(this.toolbox.btn_line);
    };

    return RaphaelWrapper;

  })();

  $(document).ready(function() {
    $('#colorpicker-container').ColorPicker({
      flat: true
    });
    return _this.raphael = new RaphaelWrapper();
  });

}).call(this);
